[{"path":"https://insightsengineering.github.io/unihtee/main/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to unihtee","title":"Contributing to unihtee","text":"outlines propose change unihtee. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to unihtee","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to unihtee","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to unihtee","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"insightsengineering/unihtee\", fork = TRUE). Install development dependences devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to unihtee","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to unihtee","text":"Please note unihtee project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/unihtee/main/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://insightsengineering.github.io/unihtee/main/articles/using-unihtee.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Using unihtee","text":"Treatment effect modifiers (TEMs) responsible disparate effects treatment population. modify effect treatment outcome. precision medicine, effect modifiers delineate patient subgroups experience differing benefit given medical intervention. public health, used determine effect policy decisions sub-populations. Identifying TEMs, exist, required comprehensive understanding intervention’s effect population. Traditional parametric modelling techniques, like generalized linear models (GLMs), define TEMs pre-treatment covariates non-zero treatment interaction terms. settings characterized time--event outcomes, Cox proportional hazards model can similarly used. Inference TEMs therefore possible stringent conditions data-generating process. (semi-) parametric methods’ assumptions, like linearity covariate-outcome relationship linear model proportional hazards Cox model, violated, however, inference invalid. flexible approaches instead focus estimating conditional average treatment effect (CATE) using interpretable modelling techniques, like LASSO (Tibshirani 1996; Tian et al. 2014; S. Chen et al. 2017; Q. Zhao, Small, Ertefaie 2018; Semenova Chernozhukov 2020; Bahamyirou et al. 2022) Random Forests (Breiman 2001; Wager Athey 2018; Cui et al. 2022). , however, methods require restrictive assumptions data-generating process, like sparsity treatment effect modification (P. Zhao Yu 2006), approximately uncorrelated covariates (P. Zhao Yu 2006; Hastie, Tibshirani, Friedman 2009), sample sizes much larger number potential TEMs (P. Zhao Yu 2006), reliably recover TEMs. Instead identifying TEMs indirectly parametric modelling, recent work developed frameworks tailored task (Williamson et al. 2022; Boileau et al. 2022, 2025; Hines, Diaz-Ordaz, Vansteelandt 2022). Relying TEM variable importance parameters (TEM-VIPs), possible assess pre-treatment covariates’ influence treatment effect nonparametric, algorithm-agnostic fashion largely avoids pitfalls parametric CATE-based methodologies. TEM-VIPs defined within nonparametric statistical models may augmented causal interpretations, permitting formal causal inference TEMs. unihtee R package implements recent proposals Boileau et al. (2022) Boileau et al. (2025). TEM-VIP framework relies parameters assess marginal effect pre-treatment covariate treatment effect heterogeneity, however treatment effect defined. Nonparametric estimators provided works, asymptotic properties established. particular, estimators shown asymptotically linear minimal assumptions data-generating process, recover treatment effect modifiers readily competing methods. TEM-VIPs estimators introduced alongside worked examples following section.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/articles/using-unihtee.html","id":"unihtee-in-action","dir":"Articles","previous_headings":"","what":"unihtee in Action","title":"Using unihtee","text":"unihtee R package performs inference TEM-VIPs data-generating processes binary exposure variable either continuous, binary, right-censored time--event outcomes. restriction placed pre-treatment covariates variables, though ordinal variables formatted factors using ordered(), categorical variables one-hot encoded.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/articles/using-unihtee.html","id":"working-with-continuous-outcomes","dir":"Articles","previous_headings":"unihtee in Action","what":"Working with Continuous Outcomes","title":"Using unihtee","text":"Let nn independent identically distributed (..d.) random vectors Xii=1n{X_i}_{=1}^n Xi=(Wi,Ai,Y(0),Yi(1))∼PX,0∈ℳXX_i = (W_i, A_i, Y^{(0)}, Y_i^{(1)}) \\sim P_{X,0} \\\\mathcal{M}_X. Dropping index possible notational convenience remainder tutorial, WW defined set pp pre-treatment covariates, AA binary treatment indicator, Y(0),Yi(1)Y^{(0)}, Y_i^{(1)} continuous potential outcomes (Rubin 1974) produced control treatment conditions, respectively. , ℳX\\mathcal{M}_X full-data nonparametric model possible data-generating processes, contains true unknown full-data data-generating process PX,0P_{X,0}. note WW contains confounders treatment-outcome confounders potential TEMs, possibly overlapping sets variables. Now, PX,0P_{X,0} generally unknown random vectors unobservable: one potential outcome ever measurable practice. Still, PX,0P_{X,0} allows us readily define causal parameters inference may subsequently performed. Examples given subsections . instead access nn ..d. random observations O=(W,,Y)∼P0∈ℳO=(W,,Y) \\sim P_0 \\\\mathcal{M}, WW AA defined full-data, Y=AY(1)+(1−)Y(0)Y = AY^{(1)} + (1-)Y{(0)}. ℳ\\mathcal{M} observed-data statistical model containing possible observed-data data-generating processes, including true data-generating process P0P_{0}. Note elements ℳ\\mathcal{M} fully specified full-data counterparts ℳX\\mathcal{M}_{X}. established requisite statistical objects, let’s define data-generating process: ’s clear definition potential outcomes w_2 w_3 treatment effect modifiers: interact treatment indicator . Note w_1 w_2 confounders. TEM-VIP quantifying strength treatment effect modification w_1 w_5 outlined next.","code":"cont_outcome_dgp <- function(n_obs) {    # pre-treatment covariates   w_1 <- rnorm(n = n_obs)   w_2 <- rnorm(n = n_obs)   w_3 <- rnorm(n = n_obs)   w_4 <- rnorm(n = n_obs)   w_5 <- rnorm(n = n_obs)    # treatment   prop_score <- plogis(w_1 + w_2)   a <- rbinom(n_obs, 1, prob = prop_score)    # potential outcomes   y_1 <- rnorm(n = n_obs, mean = w_1 + 2 * w_2 + 2 * w_3 + 0.5 * a, sd = 0.1)   y_0 <- rnorm(n = n_obs, mean = w_1 + w_2, sd = 0.1)    # outcome   y <- a * y_1 + (1 - a) * y_0    # assemble the observations in a tibble   tibble(     w_1 = w_1,     w_2 = w_2,     w_3 = w_3,     w_4 = w_4,     w_5 = w_5,     a = a,     y = y   ) }"},{"path":"https://insightsengineering.github.io/unihtee/main/articles/using-unihtee.html","id":"absolute-tem-vip","dir":"Articles","previous_headings":"unihtee in Action > Working with Continuous Outcomes","what":"Absolute TEM-VIP","title":"Using unihtee","text":"Indexing WW j=1,…,pj=1,\\ldots,p, assuming without loss generality 𝔼PX,0[Wj]=0,𝔼PX,0[Wj2]>0\\mathbb{E}_{P_{X,0}}[W_j] = 0, \\mathbb{E}_{P_{X,0}}[W_j^2] > 0, can define first TEM-VIP jthj^\\text{th} pre-treatment covariate follows: ΨjF(PX,0)=CovPX,0[(Y(1)−Y(0)),Wj]𝕍PX,0[Wj]. \\Psi^F_j(P_{X,0}) = \\frac{\\text{Cov}_{P_{X,0}}[(Y^{(1)}-Y^{(0)}), W_j]}{\\mathbb{V}_{P_{X,0}}[W_j]} \\;. parameter called absolute TEM-VIP. Assuming expectation 𝔼PX,0[Y(1)|W]−𝔼PX,0[Y(0)|W]\\mathbb{E}_{P_{X,0}}[Y^{(1)}|W] - \\mathbb{E}_{P_{X,0}}[Y^{(0)}|W] conditional WjW_j linear WjW_j, ΨjF(PX,0)\\Psi^F_j(P_{X,0}) simple linear regression coefficient produced regressing difference expected potential outcomes Wj−𝔼PX,0[Wj]W_j - \\mathbb{E}_{P_{X,0}}[W_j]. Even relationship nonlinear, almost surely case applications, ΨjF(PX,0)\\Psi^F_j(P_{X,0}) corresponds correlation difference potential outcomes jthj^\\text{th} covariate, re-normalized scale potential outcomes. course, stated earlier, don’t generally access full-data random vectors required perform inference parameter. Luckily, identification conditions outlined Boileau et al. (2022) Boileau et al. (2025) — namely, unmeasured confounding positivity violations — can perform inference equivalent observed-data parameter: Ψj(P0)=CovP0[𝔼P0[Y|=1,W]−𝔼P0[Y|=0,W],Wj]𝕍P0[Wj]=ΨjF(PX,0). \\Psi_j(P_0) =\\frac{\\text{Cov}_{P_0}[\\mathbb{E}_{P_{0}}[Y|=1,W]-   \\mathbb{E}_{P_0}[Y|=0,W], W_j]}{\\mathbb{V}_{P_0}[W_j]}  = \\Psi^F_j(P_{X,0})\\;. Boileau et al. (2022) Boileau et al. (2025) derive two nonparametric estimators parameter: one-step targeted maximum likelihood (TML) estimators. require estimation two nuisance parameters: propensity score expected outcome conditioned treatment pre-treatment covariates. estimators doubly robust: one nuisance parameter required consistently estimated ensure one-step TML estimators consistent. nuisance parameters converge true values fast enough rate, one-step TML estimators asymptotically normal. permits hypothesis testing Ψj(P0)\\Psi_j(P_0) using Wald-type confidence intervals. details estimators asymptotic properties provided Boileau et al. (2022) Boileau et al. (2025). defined parameter briefly discussed estimators, apply unicate() recover treatment effect modifiers, defined absolute TEM-VIP. one-step TML estimators showcased. LASSO regression Tibshirani (1996) used estimate nuisance parameters. unicate() outputs table results summarizing TEM-VIP inference procedure potential treatment effect modifier. table ordered nominal p-value inference procedure. one-step TML estimators correctly identify TEM-VIP w_2 w_3 non-zero based false discovery rate adjusted p-values. estimator’s point estimates also close true parameter values; every unit increase w_2, one-step TML estimators suggest average treatment effect increases ≈0.85\\approx 0.85 ≈0.82\\approx 0.82 units, respectively. Similarly w_3, one-step TML estimators indicate unit increase covariate leads increase ≈1.95\\approx 1.95 ≈1.91\\approx 1.91 average treatment effect, respectively.","code":"set.seed(514)  # simulate a random sample sample_df <- cont_outcome_dgp(n_obs = 500)  # one-step estimator unihtee(   data = sample_df,   confounders = c(\"w_1\", \"w_2\", \"w_3\", \"w_4\", \"w_5\"),   modifiers =  c(\"w_1\", \"w_2\", \"w_3\", \"w_4\", \"w_5\"),   exposure = \"a\",   outcome = \"y\",   outcome_type = \"continuous\",   effect = \"absolute\",   estimator = \"onestep\",   cond_outcome_estimator = sl3::make_learner(     sl3::Pipeline,     sl3::Lrnr_define_interactions$new(       list(c(\"w_1\", \"a\"), c(\"w_2\", \"a\"), c(\"w_3\", \"a\"), c(\"w_4\", \"a\"),            c(\"w_5\", \"a\"))     ),     sl3::Lrnr_glmnet$new()   ),   prop_score_estimator = sl3::Lrnr_glmnet$new(family = \"binomial\") ) #>    modifier   estimate        se          z      p_value    ci_lower  ci_upper #>      <fctr>      <num>     <num>      <num>        <num>       <num>     <num> #> 1:      w_3  1.9489367 0.1292105 15.0834273 0.000000e+00  1.69568416 2.2021892 #> 2:      w_2  0.8490835 0.1150728  7.3786643 1.598721e-13  0.62354083 1.0746262 #> 3:      w_5  0.1451094 0.1094073  1.3263227 1.847328e-01 -0.06932893 0.3595477 #> 4:      w_4 -0.1313010 0.1214854 -1.0807961 2.797878e-01 -0.36941247 0.1068105 #> 5:      w_1 -0.0518593 0.1223479 -0.4238677 6.716623e-01 -0.29166110 0.1879425 #>     p_value_fdr #>           <num> #> 1: 0.000000e+00 #> 2: 3.996803e-13 #> 3: 3.078881e-01 #> 4: 3.497348e-01 #> 5: 6.716623e-01  # TML estimator unihtee(   data = sample_df,   confounders = c(\"w_1\", \"w_2\", \"w_3\", \"w_4\", \"w_5\"),   modifiers =  c(\"w_1\", \"w_2\", \"w_3\", \"w_4\", \"w_5\"),   exposure = \"a\",   outcome = \"y\",   outcome_type = \"continuous\",   effect = \"absolute\",   estimator = \"tmle\",   cond_outcome_estimator = sl3::make_learner(     sl3::Pipeline,     sl3::Lrnr_define_interactions$new(       list(c(\"w_1\", \"a\"), c(\"w_2\", \"a\"), c(\"w_3\", \"a\"), c(\"w_4\", \"a\"),            c(\"w_5\", \"a\"))     ),     sl3::Lrnr_glmnet$new()   ),   prop_score_estimator = sl3::Lrnr_glmnet$new(family = \"binomial\") ) #>    modifier    estimate        se          z      p_value   ci_lower  ci_upper #>      <fctr>       <num>     <num>      <num>        <num>      <num>     <num> #> 1:      w_3  1.91250564 0.1293286 14.7879507 0.000000e+00  1.6590215 2.1659898 #> 2:      w_2  0.81718180 0.1150533  7.1026343 1.223910e-12  0.5916773 1.0426864 #> 3:      w_5  0.15254387 0.1094359  1.3939106 1.633446e-01 -0.0619505 0.3670383 #> 4:      w_4 -0.11791391 0.1215815 -0.9698345 3.321290e-01 -0.3562136 0.1203858 #> 5:      w_1 -0.06414269 0.1224767 -0.5237135 6.004778e-01 -0.3041970 0.1759116 #>     p_value_fdr #>           <num> #> 1: 0.000000e+00 #> 2: 3.059775e-12 #> 3: 2.722410e-01 #> 4: 4.151613e-01 #> 5: 6.004778e-01"},{"path":"https://insightsengineering.github.io/unihtee/main/articles/using-unihtee.html","id":"working-with-binary-outcomes","dir":"Articles","previous_headings":"unihtee in Action","what":"Working with Binary Outcomes","title":"Using unihtee","text":"binary outcome setting, full-data observed-data models data-generating processes identical continuous outcome setting, save outcome binary. means absolute TEM-VIP can used binary-outcome data — practical difference choice estimator used expected outcome conditional treatment covariates. said, relative TEM-VIP generally sensitive informative scenarios. propose parameter following section. , however, define data-generating process two treatment effect modifiers: , w_2 w_3 treatment effect modifier. interact treatment variable, .","code":"bin_outcome_dgp <- function(n_obs) {    # pre-treatment covariates   w_1 <- rpois(n = n_obs, lambda = 3)   w_2 <- rnorm(n = n_obs)   w_3 <- rbinom(n = n_obs, size = 1, prob = 0.5)    # treatment   prop_score <- plogis(-0.5 + 0.25 * w_1 + w_2 + 0.5 * w_3)   a <- rbinom(n_obs, 1, prob = prop_score)    # potential outcomes   y_prob_1 <- plogis(-1 - 3 * w_3)   y_prob_0 <- plogis(1 + 2 * w_2)   y_1 <- rbinom(n_obs, 1, prob = y_prob_1)   y_0 <- rbinom(n_obs, 1, prob = y_prob_0)    # outcome   y <- a * y_1 + (1 - a) * y_0    # assemble the observations in a tibble   tibble(     w_1 = w_1,     w_2 = w_2,     w_3 = w_3,     a = a,     y = y   ) }"},{"path":"https://insightsengineering.github.io/unihtee/main/articles/using-unihtee.html","id":"relative-tem-vip","dir":"Articles","previous_headings":"unihtee in Action > Working with Binary Outcomes","what":"Relative TEM-VIP","title":"Using unihtee","text":"relative TEM-VIP jthj^\\text{th} pre-treatment covariate ΓjF(PX,0)=CovPX,0[log⁡𝔼PX,0[Y(1)|W]−log⁡𝔼PX,0[Y(0)|W],Wj]𝕍PX,0[Wj]. \\Gamma^F_j(P_{X,0}) =\\frac{\\text{Cov}_{P_{X,0}}[\\log\\mathbb{E}_{P_{X,0}}[Y^{(1)}|W]-   \\log\\mathbb{E}_{P_{X,0}}[Y^{(0)}|W], W_j]}   {\\mathbb{V}_{P_{X,0}}[W_j]} \\;. Assuming expectation log ratio expected conditional potential outcomes conditional WjW_j linear WjW_j, ΓjF(PX,0)\\Gamma^F_j(P_{X,0}) simple linear regression coefficient obtained regressing log ratio expected conditional potential outcomes $W_j - \\mathbbf{E}_{P_{X,0}}[W_j]$. ΨjF(PX,0)\\Psi^F_j(P_{X,0}), parameter can interpreted standardized correlation coefficient log ratio expected potential outcomes jthj^\\text{th} pre-treatment covariate. highlight TEM-VIP isn’t restricted data-generating processes binary outcomes; may also used outcome non-negative, continuous discrete random variable. , much like ΨjF(PX,0)\\Psi^F_j(P_{X,0}), ΓjF(PX,0)\\Gamma^F_j(P_{X,0}) isn’t generally ever observed since parameter full-data model. conditions unmeasured confounding absence positivity violations, however, equivalent parameter can estimated observed-data: Γj(P0)=CovP0[log⁡𝔼P0[Y|=1,W]−log⁡𝔼P0[Y|=0,W],Wj]𝕍P0[Wj]=ΓjF(PX,0). \\Gamma_j(P_0) =\\frac{\\text{Cov}_{P_0}[\\log\\mathbb{E}_{P_{0}}[Y|=1,W]-   \\log\\mathbb{E}_{P_0}[Y|=0,W], W_j]}{\\mathbb{V}_{P_0}[W_j]}  = \\Gamma^F_j(P_{X,0})\\;. Nonparametric one-step TML estimators parameter derived Boileau et al. (2025) implemented unicate package. Just like Ψj(P0)\\Psi_j(P_0), inference parameter depends estimation propensity score expected outcome conditional treatment indicator covariates. estimators consistent nuisance parameters consistently estimated, asymptotically normal converge true values rate n−1/4n^{-1/4}. latter permits hypothesis testing based Wald-type confidence intervals. Additional details provided Boileau et al. (2025). now apply estimators random sample generated bin_outcome_dgp(). nuisance parameters estimated using Random Forests implemented ranger package (Breiman 2001; Wright Ziegler 2017). Note estimators fit using cross-fitting (Zheng van der Laan 2011; Chernozhukov et al. 2017). estimators correctly identify w_2 w_3 treatment effect modifiers, defined relative TEM-VIP. one-step estimator’s results suggest every unit increase w_2 w_3, log ratio conditional expected potential outcomes expected decrease ≈0.97\\approx 0.97 ≈3.15\\approx 3.15 units, respectively. TML estimator, log ration conditional expected outcomes expected decrease ≈0.90\\approx 0.90 ≈3.77\\approx 3.77 every unit increase w_2 w_3, respectively.","code":"# simulate a random sample sample_df <- bin_outcome_dgp(n_obs = 1000)  # one-step estimator unihtee(   data = sample_df,   confounders = c(\"w_1\", \"w_2\", \"w_3\"),   modifiers =  c(\"w_1\", \"w_2\", \"w_3\"),   exposure = \"a\",   outcome = \"y\",   outcome_type = \"binary\",   effect = \"relative\",   estimator = \"onestep\",   cond_outcome_estimator = sl3::Lrnr_ranger$new(),   prop_score_estimator = sl3::Lrnr_ranger$new(),   cross_fit = TRUE ) #>    modifier    estimate        se           z      p_value  ci_lower #>      <fctr>       <num>     <num>       <num>        <num>     <num> #> 1:      w_3 -3.48443818 0.6479029 -5.37802562 7.530710e-08 -4.754328 #> 2:      w_2 -0.87932567 0.4091068 -2.14937904 3.160437e-02 -1.681175 #> 3:      w_1 -0.04379762 1.0908615 -0.04014957 9.679739e-01 -2.181886 #>       ci_upper  p_value_fdr #>          <num>        <num> #> 1: -2.21454857 2.259213e-07 #> 2: -0.07747626 4.740655e-02 #> 3:  2.09429088 9.679739e-01  # TML estimator unihtee(   data = sample_df,   confounders = c(\"w_1\", \"w_2\", \"w_3\"),   modifiers =  c(\"w_1\", \"w_2\", \"w_3\"),   exposure = \"a\",   outcome = \"y\",   outcome_type = \"binary\",   effect = \"relative\",   estimator = \"tmle\",   cond_outcome_estimator = sl3::Lrnr_ranger$new(),   prop_score_estimator = sl3::Lrnr_ranger$new(),   cross_fit = TRUE ) #>    modifier    estimate        se           z      p_value  ci_lower #>      <fctr>       <num>     <num>       <num>        <num>     <num> #> 1:      w_3 -3.78448151 0.5030545 -7.52300556 5.353114e-14 -4.770468 #> 2:      w_2 -0.89070174 0.4264948 -2.08842354 3.675965e-02 -1.726632 #> 3:      w_1  0.05910131 1.0768935  0.05488129 9.562330e-01 -2.051610 #>       ci_upper  p_value_fdr #>          <num>        <num> #> 1: -2.79849477 1.605934e-13 #> 2: -0.05477197 5.513947e-02 #> 3:  2.16981260 9.562330e-01"},{"path":"https://insightsengineering.github.io/unihtee/main/articles/using-unihtee.html","id":"working-with-time-to-event-outcomes","dir":"Articles","previous_headings":"unihtee in Action","what":"Working with Time-to-Event Outcomes","title":"Using unihtee","text":"unihtee also provides functionality estimating TEM-VIPs data right-censored time--event outcomes. detail assumed full-data observed-data models , introduce absolute relative TEM-VIP subsequent sections. Consider nn ..d. random vectors X=(W,,C(0),C(1),T(0),T(1))∼PX,0∈ℳXX = (W, , C^{(0)}, C^{(1)}, T^{(0)}, T^{(1)}) \\sim P_{X,0} \\\\mathcal{M}_X. W,,PX,0,W, , P_{X,0}, ℳX\\mathcal{M}_X defined continuous binary outcome models. C(0)C^{(0)} C(1)C^{(1)} correspond censoring times observed control treatment conditions, respectively. Similarly, T(0)T^{(0)} T(1)T^{(1)} event times observed either treatment assignment. , PX,0P_{X,0} generally unobservable. instead access random observations O=(W,,Δ,T)∼P0∈ℳO = (W, , \\Delta, T) \\sim P_0 \\\\mathcal{M}, Δ\\Delta censoring indicator T=(ΔC(1)+(1−Δ)T(1))+(1−)(ΔC(0)+(1−Δ)T(0))T = (\\Delta C^{(1)} + (1-\\Delta)T^{(1)}) + (1-)(\\Delta C^{(0)} + (1-\\Delta) T^{(0)}). W,,P0,W, , P_0, ℳ\\mathcal{M} defined previous observed-data models. Now, ’s worth introducing full-data observed-data conditional survival functions since TEM-VIPs introduced section rely . full-data survival function defined SPX,0(t|,W)=ℙPX,0[T()>t|W]S_{P_{X,0}}(t|,W) = \\mathbb{P}_{P_{X,0}}[T^{()} > t | W]. parameter’s observed-data counterpart defined analogously S0(t|,W)=PP0[T>t|,W]S_0(t|,W) = P_{P_0}[T > t |, W]. Finally, define time--event data-generating process nine equidistant time points three potential confounders, w_1, w_2, w_3. covariates, w_1 treatment effect modifier. Note unihtee() requires “wide” data format working time--event outcome data. , observation represented single row data. example provided following code chunk.","code":"# define hazard functions cond_cens_hazard <- function(time, a, w_1, w_2, w_3) {   (time < 9) / (1 + exp(4 + 0.2 * (w_1 + w_2) - a)) } cond_surv_hazard <- function(time, a, w_1, w_2, w_3) {   (time < 9) / (1 + exp(2 + 3 * a * w_1)) + (time == 9) }  # failure time simulator failure_time_sim <- function(n_obs, a, w_1, w_2, w_3) {   sapply(     seq_len(n_obs),     function(obs) {       failure_time <- NA       for (t in 1:9) {         prob <- cond_surv_hazard(t, a, w_1[obs], w_2[obs], w_3[obs])         status <- rbinom(1, 1, prob)         if (status == 1) {           failure_time <- t           break         }       }       return(failure_time)     }   ) }  # censoring time simulator censor_time_sim <- function(n_obs, a, w_1, w_2, w_3) {   sapply(     seq_len(n_obs),     function(obs) {       censor_time <- NA       for (t in 1:9) {         prob <- cond_cens_hazard(t, a, w_1[obs], w_2[obs], w_3[obs])         status <- rbinom(1, 1, prob)         if (status == 1) {           censor_time <- t           break         }       }       if (is.na(censor_time)) censor_time <- 10       return(censor_time)     }   ) }  # time-to-event outcome data-generating process tte_outcome_dgp <- function(n_obs) {    # pre-treatment covariates   w_1 <- rnorm(n = n_obs)   w_2 <- rnorm(n = n_obs)   w_3 <- rnorm(n = n_obs)    # treatment   prop_score <- plogis(-1 - w_1 + w_2 - w_3)   a <- rbinom(n_obs, 1, prob = prop_score)    # generate the failure events for t = 1 to 9   failure_time_1 <- failure_time_sim(n_obs, 1, w_1, w_2, w_3)   failure_time_0 <- failure_time_sim(n_obs, 0, w_1, w_2, w_3)    # generate the censoring events for t = 1 to 9   censor_time_1 <- censor_time_sim(n_obs, 1, w_1, w_2, w_3)   censor_time_0 <- censor_time_sim(n_obs, 0, w_1, w_2, w_3)    # compile the failure and censoring times   failure_time <- sapply(     seq_len(n_obs),     function(obs) {       if (a[obs] == 1) failure_time_1[obs] else failure_time_0[obs]     }   )   censor_time <- sapply(     seq_len(n_obs),     function(obs) {       if (a[obs] == 1) censor_time_1[obs] else censor_time_0[obs]     }   )      # determine the observed time-to-event and censoring indicator   time <- sapply(     seq_len(n_obs),     function(obs) {       if (censor_time[obs] < failure_time[obs]) {         censor_time[obs]       } else {         failure_time[obs]       }     }   )   censoring_indicator <- sapply(     seq_len(n_obs),     function(obs) if (time[obs] == censor_time[obs]) 1 else 0   )      # assemble the tibble   tibble(     w_1 = w_1,     w_2 = w_2,     w_3 = w_3,     a = a,     time = time,     censoring_indicator = censoring_indicator   ) } tte_outcome_dgp(10) #> # A tibble: 10 × 6 #>        w_1    w_2    w_3     a  time censoring_indicator #>      <dbl>  <dbl>  <dbl> <int> <int>               <dbl> #>  1 -0.592   0.786  0.379     1     1                   0 #>  2 -1.31    0.555  0.357     1     2                   0 #>  3 -0.854  -1.01   0.840     1     2                   0 #>  4 -0.147  -0.317 -0.293     1     3                   0 #>  5  0.987  -0.411  0.701     0     5                   0 #>  6  0.0565  0.160 -0.446     0     3                   0 #>  7  0.614  -0.235 -1.00      1     6                   0 #>  8 -1.07    1.68   1.07      1     1                   0 #>  9  0.324   2.62   0.457     0     4                   0 #> 10 -0.593  -0.905  1.13      0     5                   1"},{"path":"https://insightsengineering.github.io/unihtee/main/articles/using-unihtee.html","id":"absolute-tem-vip-1","dir":"Articles","previous_headings":"unihtee in Action > Working with Time-to-Event Outcomes","what":"Absolute TEM-VIP","title":"Using unihtee","text":"Boileau et al. (2025) Propose absolute TEM-VIP based difference restricted mean survival times pre-specified time tt. TEM-VIP defined ΨjF(PX,0;t)=CovPX,0[∫0t{SPX,0(u|1,W)−SPX,0(u|0,W)}du,Wj]𝕍PX,0[Wj]. \\Psi_j^F(P_{X,0};t) = \\frac{\\text{Cov}_{P_{X,0}}\\left[   \\int_0^t \\{ S_{P_{X,0}}(u|1, W) - S_{P_{X,0}}(u|0, W) \\} du, W_j \\right]}   {\\mathbb{V}_{P_{X,0}}[W_j]} \\; . “Ψ\\Psi” re-used highlight absolute TEM-VIP. continuous outcome scenario, parameter captures correlation conditional difference restricted mean survival time jthj^\\text{th} covariate, re-normalized scale outcome. Put another way, parameter identifies TEMs driving largest difference truncated survival times across treatment conditions. , full-data parameter equal following observed-data parameter assumptions (1) unmeasured confounding, (2) censoring mechanism positivity, (3) treatment assignment positivity: Ψj(P0;t)=CovP0[∫0t{S0(u|1,W)−S0(u|0,W)}du,Wj]𝕍P0[Wj]. \\Psi_j(P_0;t) = \\frac{\\text{Cov}_{P_0}\\left[   \\int_0^t \\{ S_0(u|1, W) - S_0(u|0, W) \\} du, W_j \\right]}   {\\mathbb{V}_{P_0}[W_j]} \\; . continuous binary outcome scenarios, Boileau et al. (2025) derived two estimators absolute effect parameter: one-step estimator TML estimator. rely accurate estimation three nuisance parameters: conditional event hazard function, conditional censoring hazard function, propensity score. either conditional event hazard function conditional censoring hazard function propensity score consistently estimated, nonparametric estimators consistent. , nuisance parameters converge true values rate n−1/4n^{-1/4}, estimators asymptotically normally distributed. permits hypothesis testing use Wald-type confidence intervals. See Boileau et al. (2025) details. now apply estimators random sample data-generating process defined , choosing target parameter Ψ(P0;8)\\Psi(P_0; 8). LASSO regressions used estimate propensity scores censoring hazard functions, , demonstration methods’ flexibility, estimate failure hazard function XGBoost (T. Chen Guestrin 2016). results suggest every unit increase w_1 results increase ≈2.40\\approx 2.40 — according one-step estimator — ≈1.95\\approx 1.95 — according TML estimator — time units difference mean survival times, truncated time eight.","code":"# simulate a random sample sample_df <- tte_outcome_dgp(n_obs = 250)  # one-step estimator unihtee(   data = sample_df,   confounders = c(\"w_1\", \"w_2\", \"w_3\"),   modifiers = c(\"w_1\", \"w_2\", \"w_3\"),   exposure = \"a\",   outcome = \"time\",   censoring = \"censoring_indicator\",   time_cutoff = 8,   outcome_type = \"time-to-event\",   effect = \"absolute\",   estimator = \"onestep\",   prop_score_estimator = sl3::Lrnr_glmnet$new(),   failure_hazard_estimator = sl3::Lrnr_xgboost$new(),   censoring_hazard_estimator = sl3::Lrnr_glmnet$new() ) #>    modifier    estimate        se          z   p_value   ci_lower  ci_upper #>      <fctr>       <num>     <num>      <num>     <num>      <num>     <num> #> 1:      w_1  2.39673344 0.2823834  8.4875152 0.0000000  1.8432620 2.9502049 #> 2:      w_2 -0.14157860 0.3217762 -0.4399909 0.6599437 -0.7722599 0.4891027 #> 3:      w_3  0.08090048 0.3299970  0.2451552 0.8063363 -0.5658936 0.7276946 #>    p_value_fdr #>          <num> #> 1:   0.0000000 #> 2:   0.8063363 #> 3:   0.8063363  # TML estimator unihtee(   data = sample_df,   confounders = c(\"w_1\", \"w_2\", \"w_3\"),   modifiers = c(\"w_1\", \"w_2\", \"w_3\"),   exposure = \"a\",   outcome = \"time\",   censoring = \"censoring_indicator\",   time_cutoff = 8,   outcome_type = \"time-to-event\",   effect = \"absolute\",   estimator = \"tmle\",   prop_score_estimator = sl3::Lrnr_glmnet$new(),   failure_hazard_estimator = sl3::Lrnr_xgboost$new(),   censoring_hazard_estimator = sl3::Lrnr_glmnet$new() ) #>    modifier    estimate        se           z      p_value   ci_lower  ci_upper #>      <fctr>       <num>     <num>       <num>        <num>      <num>     <num> #> 1:      w_1  1.94534464 0.2826673  6.88209971 5.897727e-12  1.3913167 2.4993726 #> 2:      w_2  0.09930273 0.3200769  0.31024646 7.563735e-01 -0.5280480 0.7266535 #> 3:      w_3 -0.03189188 0.3300905 -0.09661556 9.230317e-01 -0.6788692 0.6150855 #>     p_value_fdr #>           <num> #> 1: 1.769318e-11 #> 2: 9.230317e-01 #> 3: 9.230317e-01"},{"path":"https://insightsengineering.github.io/unihtee/main/articles/using-unihtee.html","id":"relative-tem-vip-1","dir":"Articles","previous_headings":"unihtee in Action > Working with Time-to-Event Outcomes","what":"Relative TEM-VIP","title":"Using unihtee","text":"next consider relative TEM-VIP data right-censored time--event outcomes. define parameter follows jthj^\\text{th} pre-treatment covariate: ΓjF(PX,0;t)=CovPX,0[logSPX,0(t|1,W)−logSPX,0(t|0,W),Wj]𝕍PX,0[Wj]. \\Gamma_j^F(P_{X,0};t) = \\frac{\\text{Cov}_{P_{X,0}}\\left[   \\log S_{P_{X,0}}(t|1, W) - \\log S_{P_{X,0}}(t|0, W), W_j\\right]}   {\\mathbb{V}_{P_{X,0}}[W_j]} \\; . pre-specified time point tt, TEM-VIP represents standardized correlation coefficient WjW_j log ratio conditional survival times treatment condition. “Ψ\\Psi”, re-use “Γ\\Gamma” highlight relative effect parameter. observed-data counterpart given ΓjF(P0;t)=CovP0[logS0(t|1,W)−logS0(t|0,W),Wj]𝕍P0[Wj], \\Gamma_j^F(P_0;t) = \\frac{\\text{Cov}_{P_0}\\left[   \\log S_0(t|1, W) - \\log S_0(t|0, W), W_j\\right]}   {\\mathbb{V}_{P_0}[W_j]} \\; ,  assuming unmeasured confounding positivity violations censoring treatment assignment mechanisms. Boileau et al. (2025) derived one-step TML estimators parameter, requiring estimation three nuisance parameters: propensity score conditional failure censoring event hazards. one-step TML estimators consistent nuisance parameters estimated consistently, asymptotically linear nuisance parameters converge true values fast-enough rate (Boileau et al. 2025). apply nonparametric estimators Boileau et al. (2025) random sample generated tte_outcome_dgp(), taking target inference Γj(P0;5)\\Gamma_j(P_0; 5). nuisance parameters estimated using strategy employed prior absolute TEM-VIP example. , one-step TML estimators successfully discern TEM potential TEMs using false discovery rate cutoff 5%5\\%. results indicate unit increase w_1 results increase log ratio conditional survivals equal either ≈3.13\\approx 3.13 ≈3.10\\approx 3.10, depending whether one uses one-step estimator TML estimator.","code":"# simulate a random sample sample_df <- tte_outcome_dgp(n_obs = 2000)  # one-step estimator unihtee(   data = sample_df,   confounders = c(\"w_1\", \"w_2\", \"w_3\"),   modifiers = c(\"w_1\", \"w_2\", \"w_3\"),   exposure = \"a\",   outcome = \"time\",   censoring = \"censoring_indicator\",   time_cutoff = 5,   outcome_type = \"time-to-event\",   effect = \"relative\",   estimator = \"onestep\",   prop_score_estimator = sl3::Lrnr_glmnet$new(),   failure_hazard_estimator = sl3::Lrnr_xgboost$new(),   censoring_hazard_estimator = sl3::Lrnr_glmnet$new(),   cross_fit = TRUE ) #>    modifier  estimate        se         z   p_value  ci_lower ci_upper #>      <fctr>     <num>     <num>     <num>     <num>     <num>    <num> #> 1:      w_1 3.1304788 0.3629837 8.6242960 0.0000000  2.419031 3.841927 #> 2:      w_3 0.8748264 0.9267492 0.9439732 0.3451833 -0.941602 2.691255 #> 3:      w_2 1.6169328 1.7992532 0.8986688 0.3688291 -1.909604 5.143469 #>    p_value_fdr #>          <num> #> 1:   0.0000000 #> 2:   0.3688291 #> 3:   0.3688291  # TML estimator unihtee(   data = sample_df,   confounders = c(\"w_1\", \"w_2\", \"w_3\"),   modifiers = c(\"w_1\", \"w_2\", \"w_3\"),   exposure = \"a\",   outcome = \"time\",   censoring = \"censoring_indicator\",   time_cutoff = 5,   outcome_type = \"time-to-event\",   effect = \"relative\",   estimator = \"tmle\",   prop_score_estimator = sl3::Lrnr_glmnet$new(),   failure_hazard_estimator = sl3::Lrnr_xgboost$new(),   censoring_hazard_estimator = sl3::Lrnr_glmnet$new(),   cross_fit = TRUE ) #>    modifier    estimate        se           z      p_value  ci_lower ci_upper #>      <fctr>       <num>     <num>       <num>        <num>     <num>    <num> #> 1:      w_1  3.10042980 0.7241641  4.28139139 1.857284e-05  1.681068 4.519791 #> 2:      w_3 -0.02600101 0.6190648 -0.04200046 9.664983e-01 -1.239368 1.187366 #> 3:      w_2  0.01953589 1.7145968  0.01139387 9.909092e-01 -3.341074 3.380146 #>     p_value_fdr #>           <num> #> 1: 5.571851e-05 #> 2: 9.909092e-01 #> 3: 9.909092e-01"},{"path":[]},{"path":"https://insightsengineering.github.io/unihtee/main/articles/using-unihtee.html","id":"working-with-randomized-experiment-data","dir":"Articles","previous_headings":"Additional Features and Notes","what":"Working with Randomized Experiment Data","title":"Using unihtee","text":"unihtee’s estimators applied (simulated) observational data previous section’s examples, also suitable data generated randomized experiments. propensity scores used randomize observations saved data object passed unihtee(), name variable containing scores indicated propensity_score_values argument. Providing known propensity scores absolute TEM-VIP estimators produces desirable results. continuous binary outcome settings, providing known treatment assignment probabilities guarantees estimators asymptotically linear, even expected conditional outcome estimator misspecified. outcome right-censored time--event variable, asymptotic normality estimators guaranteed long conditional censoring hazard estimated consistently rate n−1/4n^{-1/4}. Additional details discussions provided Boileau et al. (2022) Boileau et al. (2025).","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/articles/using-unihtee.html","id":"cross-fitting","dir":"Articles","previous_headings":"Additional Features and Notes","what":"Cross-Fitting","title":"Using unihtee","text":"Cross-fitting, popularized Zheng van der Laan (2011) Chernozhukov et al. (2017), uses cross-validation fit nuisance parameters estimate target parameter. relaxes assumption required asymptotic normality one-step TML estimators implemented unihtee package (Boileau et al. 2025). technique also known improve estimators finite-sample properties, reducing false discovery rate (see, example, Hejazi et al.). Users may employ cross-fitted version estimator implemented unihtee setting unihtee()’s cross_fit argument TRUE. K-fold cross-validation currently supported. number folds defaults five, though can modified using cross_fit_folds argument. Examples provided binary outcome time--event outcome relative TEM-VIP sections , well subsection Super Learners follows.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/articles/using-unihtee.html","id":"sl3-integration-using-super-learners","dir":"Articles","previous_headings":"Additional Features and Notes","what":"sl3 Integration: Using Super Learners","title":"Using unihtee","text":"unihtee uses estimators implemented sl3 (Coyle et al. 2021) estimate nuisance parameters. individual estimators may used, done examples , sl3’s main contribution facilities constructing Super Learners (Laan, Polley, Hubbard 2007). Super Learners ensemble algorithms, meaning convex combination individual supervised learning algorithms. individual algorithms combined basis user-defined risk, combination asymptotically optimal respect said risk minimal conditions data-generating process. complete review Super Learners sl3 outside scope vignette. invite interested reader tutorials available sl3 package’s website Chapter 6 tlverse handbook (Phillips 2023). Employing Super Learners estimate nuisance parameters decreases risk model-misspecification — assuming, course, diverse collection individual learning algorithms considered. turn, increased likelihood resulting one-step TML estimators asymptotically normal. revisit continuous outcome example, time using Super Learners estimate propensity score conditional expected outcomes. Super Learners composed penalized GLMs, multivariate adaptive regression splines (Friedman 1991), Random Forests. propensity score’s Super Learner uses negative log likelihood loss form convex combination individual learning algorithms, conditional expected outcomes’ uses squared error loss. Though procedure robust, resulting estimates hypothesis tests similar previous continuous outcome, absolute TEM-VIP example.","code":"# simulate a random sample sample_df <- cont_outcome_dgp(n_obs = 500)  # define the Super Learner for the propensity score sl_bin <- Lrnr_sl$new(   learners = list(     Lrnr_glmnet$new(family = \"binomial\", alpha = 0),     Lrnr_glmnet$new(family = \"binomial\", alpha = 0),     Lrnr_glmnet$new(family = \"binomial\", alpha = 0.5),     Lrnr_earth$new(glm = list(family = \"binomial\")),     Lrnr_ranger$new()   ),   metalearner = make_learner(     Lrnr_solnp, metalearner_logistic_binomial, loss_loglik_binomial   ) )  # define the Super Learner for the conditional expected outcomes sl_cont <- Lrnr_sl$new(   learners = list(     sl3::make_learner(       sl3::Pipeline,       sl3::Lrnr_define_interactions$new(         list(c(\"w_1\", \"a\"), c(\"w_2\", \"a\"), c(\"w_3\", \"a\"), c(\"w_4\", \"a\"),              c(\"w_5\", \"a\"))       ),       sl3::Lrnr_glmnet$new(alpha = 1)     ),     sl3::make_learner(       sl3::Pipeline,       sl3::Lrnr_define_interactions$new(         list(c(\"w_1\", \"a\"), c(\"w_2\", \"a\"), c(\"w_3\", \"a\"), c(\"w_4\", \"a\"),              c(\"w_5\", \"a\"))       ),       sl3::Lrnr_glmnet$new(alpha = 0.5)     ),     sl3::make_learner(       sl3::Pipeline,       sl3::Lrnr_define_interactions$new(         list(c(\"w_1\", \"a\"), c(\"w_2\", \"a\"), c(\"w_3\", \"a\"), c(\"w_4\", \"a\"),              c(\"w_5\", \"a\"))       ),       sl3::Lrnr_glmnet$new(alpha = 0)     ),     Lrnr_earth$new(degree = 1),     Lrnr_earth$new(glm = list(family = \"gaussian\"), degree = 2),     Lrnr_ranger$new()   ),   metalearner = make_learner(     Lrnr_solnp, metalearner_linear, loss_squared_error   ) )  # one-step estimator unihtee(   data = sample_df,   confounders = c(\"w_1\", \"w_2\", \"w_3\", \"w_4\", \"w_5\"),   modifiers =  c(\"w_1\", \"w_2\", \"w_3\", \"w_4\", \"w_5\"),   exposure = \"a\",   outcome = \"y\",   outcome_type = \"continuous\",   effect = \"absolute\",   estimator = \"onestep\",   cond_outcome_estimator = sl_cont,   prop_score_estimator = sl_bin ) #>    modifier     estimate        se           z   p_value    ci_lower  ci_upper #>      <fctr>        <num>     <num>       <num>     <num>       <num>     <num> #> 1:      w_2  1.075841687 0.1118589  9.61784353 0.0000000  0.85659818 1.2950852 #> 2:      w_3  2.024303055 0.1330007 15.22024499 0.0000000  1.76362171 2.2849844 #> 3:      w_1  0.161787857 0.1188020  1.36182826 0.1732521 -0.07106397 0.3946397 #> 4:      w_5  0.007153675 0.1212798  0.05898488 0.9529641 -0.23055475 0.2448621 #> 5:      w_4 -0.002416209 0.1198597 -0.02015864 0.9839168 -0.23734126 0.2325088 #>    p_value_fdr #>          <num> #> 1:   0.0000000 #> 2:   0.0000000 #> 3:   0.2887535 #> 4:   0.9839168 #> 5:   0.9839168  # TML estimator unihtee(   data = sample_df,   confounders = c(\"w_1\", \"w_2\", \"w_3\", \"w_4\", \"w_5\"),   modifiers =  c(\"w_1\", \"w_2\", \"w_3\", \"w_4\", \"w_5\"),   exposure = \"a\",   outcome = \"y\",   outcome_type = \"continuous\",   effect = \"absolute\",   estimator = \"tmle\",   cond_outcome_estimator = sl_cont,   prop_score_estimator = sl_bin ) #>    modifier     estimate        se           z   p_value    ci_lower  ci_upper #>      <fctr>        <num>     <num>       <num>     <num>       <num>     <num> #> 1:      w_2  1.052130930 0.1119089  9.40166999 0.0000000  0.83278941 1.2714725 #> 2:      w_3  1.999026617 0.1330143 15.02865830 0.0000000  1.73831857 2.2597347 #> 3:      w_1  0.156419220 0.1188069  1.31658412 0.1879781 -0.07644222 0.3892807 #> 4:      w_4  0.006275685 0.1199683  0.05231119 0.9582807 -0.22886223 0.2414136 #> 5:      w_5 -0.002993851 0.1213515 -0.02467091 0.9803175 -0.24084270 0.2348550 #>    p_value_fdr #>          <num> #> 1:   0.0000000 #> 2:   0.0000000 #> 3:   0.3132968 #> 4:   0.9803175 #> 5:   0.9803175"},{"path":"https://insightsengineering.github.io/unihtee/main/articles/using-unihtee.html","id":"visualizing-tem-vip-estimates","dir":"Articles","previous_headings":"","what":"Visualizing TEM-VIP Estimates","title":"Using unihtee","text":"unihtee package provides functionality visualizing pre-treatment covariates’ TEM-VIP estimates. resulting plots can help interpretation TEM-VIP parameter. Consider following data-generating process: data-generating process similar previously introduced data-generating process continuous outcomes, though contains two binary pre-treatment covariates w_2 w_5 addition continuous pre-treatment covariates w_1, w_3, w_4. can visualize TEM-VIP estimate , example, w_3 follows:  resulting plot constructed plotting simple linear regression conditional average causal effect — scenario, conditional average treatment effect — regressed w_3. previously stated, TEM-VIP w_3 corresponds slope black line. average treatment effect estimate given dotted red line. visualization binary pre-treatment covariates different. Consider plot w_2’s TEM-VIP estimate:  , w_2’s TEM-VIP estimate corresponds vertical distance two black points plot. , average treatment effect estimate given dotted red line.","code":"cont_outcome_dgp_2 <- function(n_obs) {    # pre-treatment covariates   w_1 <- rnorm(n = n_obs)   w_2 <- ifelse(rnorm(n = n_obs) < 0, 0, 1)   w_3 <- rnorm(n = n_obs)   w_4 <- rnorm(n = n_obs)   w_5 <- ifelse(rnorm(n = n_obs) < 1, 0, 1)    # treatment   prop_score <- plogis(w_1 + w_2)   a <- rbinom(n_obs, 1, prob = prop_score)    # potential outcomes   y_1 <- rnorm(n = n_obs, mean = w_1 + 2 * w_2 + 2 * w_3 + 0.5 * a, sd = 0.1)   y_0 <- rnorm(n = n_obs, mean = w_1 + w_2, sd = 0.1)    # outcome   y <- a * y_1 + (1 - a) * y_0    # assemble the observations in a tibble   tibble(     w_1 = w_1,     w_2 = w_2,     w_3 = w_3,     w_4 = w_4,     w_5 = w_5,     a = a,     y = y   ) } # simulate a random sample from above data-generating process sample_df <- cont_outcome_dgp_2(n_obs = 500)  # TML estimator unihtee_output <- unihtee(   data = sample_df,   confounders = c(\"w_1\", \"w_2\", \"w_3\", \"w_4\", \"w_5\"),   modifiers =  c(\"w_1\", \"w_2\", \"w_3\", \"w_4\", \"w_5\"),   exposure = \"a\",   outcome = \"y\",   outcome_type = \"continuous\",   effect = \"absolute\",   estimator = \"tmle\",   cond_outcome_estimator = sl_cont,   prop_score_estimator = sl_bin )  # visualize w_3's TEM-VIP estimate plot(unihtee_output, modifier_name = \"w_3\", print_interpretation = FALSE) # visualize w_2's TEM-VIP estimate plot(unihtee_output, modifier_name = \"w_2\", print_interpretation = FALSE)"},{"path":"https://insightsengineering.github.io/unihtee/main/articles/using-unihtee.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Using unihtee","text":"","code":"sessionInfo() #> R version 4.5.0 (2025-04-11) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.2 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: Etc/UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #>  [1] unihtee_0.0.3    earth_5.3.4      plotmo_3.6.4     plotrix_3.8-4    #>  [5] Formula_1.2-5    ranger_0.17.0    xgboost_1.7.11.1 glmnet_4.1-9     #>  [9] Matrix_1.7-3     Rsolnp_2.0.1     sl3_1.4.5        dplyr_1.1.4      #>  #> loaded via a namespace (and not attached): #>   [1] Rdpack_2.6.4         delayed_0.5.0        pROC_1.18.5          #>   [4] rlang_1.1.6          magrittr_2.0.3       compiler_4.5.0       #>   [7] systemfonts_1.2.3    vctrs_0.6.5          reshape2_1.4.4       #>  [10] stringr_1.5.1        pkgconfig_2.0.3      shape_1.4.6.1        #>  [13] crayon_1.5.3         fastmap_1.2.0        backports_1.5.0      #>  [16] labeling_0.4.3       rmarkdown_2.29       prodlim_2025.04.28   #>  [19] ragg_1.4.0           purrr_1.0.4          xfun_0.52            #>  [22] cachem_1.1.0         jsonlite_2.0.0       progress_1.2.3       #>  [25] recipes_1.3.1        uuid_1.2-1           parallel_4.5.0       #>  [28] prettyunits_1.2.0    R6_2.6.1             bslib_0.9.0          #>  [31] stringi_1.8.7        RColorBrewer_1.1-3   parallelly_1.45.0    #>  [34] rpart_4.1.24         lubridate_1.9.4      jquerylib_0.1.4      #>  [37] numDeriv_2016.8-1.1  Rcpp_1.1.0           assertthat_0.2.1     #>  [40] iterators_1.0.14     knitr_1.50           future.apply_1.20.0  #>  [43] R.utils_2.13.0       splines_4.5.0        nnet_7.3-20          #>  [46] igraph_2.1.4         timechange_0.3.0     tidyselect_1.2.1     #>  [49] dichromat_2.0-0.1    abind_1.4-8          yaml_2.3.10          #>  [52] timeDate_4041.110    codetools_0.2-20     listenv_0.9.1        #>  [55] lattice_0.22-7       tibble_3.3.0         plyr_1.8.9           #>  [58] withr_3.0.2          ROCR_1.0-11          evaluate_1.0.4       #>  [61] future_1.58.0        desc_1.4.3           survival_3.8-3       #>  [64] pillar_1.11.0        checkmate_2.3.2      foreach_1.5.2        #>  [67] stats4_4.5.0         generics_0.1.4       truncnorm_1.0-9      #>  [70] hms_1.1.3            ggplot2_3.5.2        scales_1.4.0         #>  [73] origami_1.0.7        globals_0.18.0       class_7.3-23         #>  [76] glue_1.8.0           tools_4.5.0          data.table_1.17.6    #>  [79] ModelMetrics_1.2.2.2 rstackdeque_1.1.1    gower_1.0.2          #>  [82] fs_1.6.6             visNetwork_2.1.2     grid_4.5.0           #>  [85] rbibutils_2.3        ipred_0.9-15         nlme_3.1-168         #>  [88] BBmisc_1.13          cli_3.6.5            textshaping_1.0.1    #>  [91] lava_1.8.1           gtable_0.3.6         R.methodsS3_1.8.2    #>  [94] sass_0.4.10          digest_0.6.37        caret_7.0-1          #>  [97] htmlwidgets_1.6.4    farver_2.1.2         htmltools_0.5.8.1    #> [100] pkgdown_2.1.3        R.oo_1.27.1          lifecycle_1.0.4      #> [103] hardhat_1.4.1        MASS_7.3-65"},{"path":"https://insightsengineering.github.io/unihtee/main/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Philippe Boileau. Author, maintainer.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Boileau P (2025). unihtee: Univariate Heterogeneous Treatment Effect Estimation. R package version 0.0.3.","code":"@Manual{,   title = {unihtee: Univariate Heterogeneous Treatment Effect Estimation},   author = {Philippe Boileau},   year = {2025},   note = {R package version 0.0.3}, }"},{"path":"https://insightsengineering.github.io/unihtee/main/index.html","id":"runihtee","dir":"","previous_headings":"","what":"Univariate Heterogeneous Treatment Effect Estimation","title":"Univariate Heterogeneous Treatment Effect Estimation","text":"Univariate Heterogeneous Treatment Effect Estimation Author: Philippe Boileau unihtee provides tools uncovering treatment effect modifiers high-dimensional data. Treatment effect modification defined using variable importance parameters based absolute relative effects. parameters called treatment effect modifier variable importance parameters (TEM-VIPs). Inference TEM-VIPs performed using causal machine learning estimators. general conditions, estimators unbiased asymptotically linear, permitting straightforward hypothesis testing TEM-VIPs. Additional details methodology provided Boileau et al. (2022), Boileau et al. (2025), package’s vignette.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Univariate Heterogeneous Treatment Effect Estimation","text":"package may installed GitHub using remotes: unihtee active development. Check back often updates.","code":"remotes::install_github(\"insightsengineering/unihtee\")"},{"path":"https://insightsengineering.github.io/unihtee/main/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Univariate Heterogeneous Treatment Effect Estimation","text":"unihtee() performs inference potential effect modifiers’ TEM-VIPs. parameters defined data-generating processes continuous, binary time--event outcomes binary exposure variables. Absolute- relative-scale TEM-VIPs available. Details provided vignette.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Univariate Heterogeneous Treatment Effect Estimation","text":"simulate observational study data contains ten pre-treatment covariates, two treatment effect modifiers. perform inference absolute TEM-VIPs. Pre-treatment covariates TEM-VIPs significantly different zero suggest covariates modify effect treatment respect average treatment effect.","code":"library(unihtee) library(MASS) library(data.table) library(sl3)  set.seed(510)  # create the dataset n_obs <- 500 w <- mvrnorm(n = n_obs, mu = rep(0, 10), Sigma = diag(10)) confounder_names <- paste0(\"w_\", seq_len(10)) colnames(w) <- confounder_names a <- rbinom(n = n_obs, size = 1, prob = plogis(w[, 1] + w[, 2])) y <- rnorm(n = n_obs, mean = w[, 1] + w[, 2] + a * w[, 3] - a * w[, 4]) dt <- as.data.table(cbind(w, a, y))  # estimate pre-treatment covariates' absolute TEM-VIPs unihtee(   data = dt,   confounders = confounder_names,   modifiers = confounder_names,   exposure = \"a\",   outcome = \"y\",   outcome_type = \"continuous\",   effect = \"absolute\" ) #>     modifier     estimate        se           z      p_value    ci_lower #>       <fctr>        <num>     <num>       <num>        <num>       <num> #>  1:      w_3  1.044592804 0.1599527  6.53063474 6.549161e-11  0.73108547 #>  2:      w_4 -0.869002514 0.1505155 -5.77351005 7.763697e-09 -1.16401281 #>  3:      w_8  0.137803254 0.1138565  1.21032372 2.261547e-01 -0.08535554 #>  4:      w_1  0.115258422 0.1168820  0.98610900 3.240796e-01 -0.11383036 #>  5:      w_9  0.124150185 0.1295567  0.95826884 3.379272e-01 -0.12978102 #>  6:     w_10 -0.097928234 0.1356345 -0.72200119 4.702937e-01 -0.36377176 #>  7:      w_6  0.054845105 0.1157812  0.47369617 6.357166e-01 -0.17208602 #>  8:      w_2 -0.064478504 0.1761998 -0.36593963 7.144101e-01 -0.40983019 #>  9:      w_7 -0.014704981 0.1485610 -0.09898279 9.211519e-01 -0.30588450 #> 10:      w_5  0.001500152 0.1100365  0.01363321 9.891226e-01 -0.21417147 #>       ci_upper  p_value_fdr #>          <num>        <num> #>  1:  1.3581001 6.549161e-10 #>  2: -0.5739922 3.881849e-08 #>  3:  0.3609620 6.758544e-01 #>  4:  0.3443472 6.758544e-01 #>  5:  0.3780814 6.758544e-01 #>  6:  0.1679153 7.838229e-01 #>  7:  0.2817762 8.930127e-01 #>  8:  0.2808732 8.930127e-01 #>  9:  0.2764745 9.891226e-01 #> 10:  0.2171718 9.891226e-01"},{"path":"https://insightsengineering.github.io/unihtee/main/index.html","id":"issues","dir":"","previous_headings":"","what":"Issues","title":"Univariate Heterogeneous Treatment Effect Estimation","text":"encounter bugs specific feature requests, please file issue.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/index.html","id":"contributions","dir":"","previous_headings":"","what":"Contributions","title":"Univariate Heterogeneous Treatment Effect Estimation","text":"Contributions welcome. Interested contributors consult contribution guidelines prior submitting pull request.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Univariate Heterogeneous Treatment Effect Estimation","text":"cite unihtee papers introducing underlying framework, use following BibTeX entries:","code":"@manual{unihtee,   title = {unihtee: Univariate Heterogeneous Treatment Effect Estimation},   author = {Philippe Boileau},   note = {R package version 0.0.1} }  @article{boileau2025,   title = {A Nonparametric Framework for Treatment Effect Modifier Discovery in High Dimensions},   author = {Boileau, Philippe and Leng, Ning and Hejazi, Nima S and {van der Laan}, Mark and Dudoit, Sandrine},   year = {2025},   journal = {Journal of the Royal Statistical Society Series B: Statistical Methodology},   volume = {87},   number = {1},   pages = {157--185},   issn = {1369-7412},   doi = {10.1093/jrsssb/qkae084} }  @article{boileau2022,   author = {Boileau, Philippe and Qi, Nina Ting and van der Laan, Mark J and Dudoit, Sandrine and Leng, Ning},   title = {A flexible approach for predictive biomarker discovery},   journal = {Biostatistics},   year = {2022},   month = {07},   issn = {1465-4644},   doi = {10.1093/biostatistics/kxac029},   url = {https://doi.org/10.1093/biostatistics/kxac029} }"},{"path":"https://insightsengineering.github.io/unihtee/main/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Univariate Heterogeneous Treatment Effect Estimation","text":"contents repository distributed Apache 2.0 license. See LICENSE.md LICENSE files details.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/unihtee/main/reference/bound_precision.html","id":null,"dir":"Reference","previous_headings":"","what":"Bounding to numerical precision — bound_precision","title":"Bounding to numerical precision — bound_precision","text":"Bounds extreme values specified tolerance level, use sensitive quantities must transformed, e.g., via qlogis.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/bound_precision.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bounding to numerical precision — bound_precision","text":"","code":"bound_precision(vals, tol = 1e-06)"},{"path":"https://insightsengineering.github.io/unihtee/main/reference/bound_precision.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bounding to numerical precision — bound_precision","text":"vals numeric vector values unit interval [0, 1]. tol numeric indicating tolerance limit extreme values truncated. Realizations val less tol truncated tol greater (1 - tol) truncated (1 - tol).","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/bound_precision.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bounding to numerical precision — bound_precision","text":"Nima S. Hejazi","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/compute_eif.html","id":null,"dir":"Reference","previous_headings":"","what":"Efficient Influence Function Computer — compute_eif","title":"Efficient Influence Function Computer — compute_eif","text":"compute_eif() computes efficient influence function chosen parameter using already estimated nuisance parameters. certain nuisance parameters known, propensity scores randomized control trial, may input directly function. Note EIF uncentered expectation; used one-step estimator. ace_estimate NULL, pseudo-uncentered EIF computed. used one-step estimator, uncentered expectation.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/compute_eif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Efficient Influence Function Computer — compute_eif","text":"","code":"compute_eif(   data,   effect,   confounders,   exposure,   outcome,   modifiers,   prop_score_fit,   prop_score_values,   cond_outcome_fit,   failure_hazard_fit,   censoring_hazard_fit,   ace_estimate,   plugin_estimates )"},{"path":"https://insightsengineering.github.io/unihtee/main/reference/compute_eif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Efficient Influence Function Computer — compute_eif","text":"data data.table containing observed data. train_data formatted unihtee(). effect character indicating type treatment effect modifier variable importance parameter. Currently supports \"absolute\" \"relative\". confounders character vector column names corresponding baseline covariates. exposure character corresponding exposure variable. outcome character corresponding outcome variable. modifiers character vector columns names corresponding suspected effect modifiers. vector must subset confounders. prop_score_fit list output fit_prop_score() function. prop_score_values numeric vector corresponding (known) propensity score values observation data. cond_outcome_fit list output fit_failure_hazard() function. failure_hazard_fit list output fit_cond_outcome() function. censoring_hazard_fit list output fit_censoring_hazard() function. ace_estimate numeric estimate average causal effect associated specified effect type data-generating process. plugin_estimates numeric vector plug-estimate treatment effect modifier variable importance parameters associated specified effect type data-generating process.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/compute_eif.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Efficient Influence Function Computer — compute_eif","text":"data.table whose columns efficient influence functions variable modifiers. rows correspond observations data.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/cross_fit_fold.html","id":null,"dir":"Reference","previous_headings":"","what":"Cross-Fitting Procedure — cross_fit_fold","title":"Cross-Fitting Procedure — cross_fit_fold","text":"cross_fit_fold() estimates treatment effect modification variable importance parameters using cross-fitting.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/cross_fit_fold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cross-Fitting Procedure — cross_fit_fold","text":"","code":"cross_fit_fold(   fold,   data,   confounders,   modifiers,   exposure,   outcome,   censoring,   outcome_type,   effect,   estimator,   cond_outcome_estimator,   prop_score_estimator,   prop_score_values,   failure_hazard_estimator,   censoring_hazard_estimator )"},{"path":"https://insightsengineering.github.io/unihtee/main/reference/cross_fit_fold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cross-Fitting Procedure — cross_fit_fold","text":"fold origami fold object. data data.table containing observed data. confounders character vector column names corresponding baseline covariates. modifiers character vector columns names corresponding suspected effect modifiers. vector must subset confounders. exposure character corresponding exposure variable. outcome character corresponding outcome variable. censoring character indicating right censoring indicator variable. used time--event outcomes. Defaults NULL. outcome_type character indicating outcome type. \"continuous\", \"binary\" \"time--event\" currently supported. effect character indicating type treatment effect modifier variable importance parameter. Currently supports \"absolute\" \"relative\". estimator character set either \"tmle\" \"onestep\". former results unihtee() use targeted maximum likelihood estimators estimate desired TEM-VIP, latter uses one step estimator. cond_outcome_estimator Stack, learner class (inheriting Lrnr_base), containing set learners sl3 estimate conditional outcome. Defaults generalized linear model one- two- way interactions among confounders exposure variables. used continuous binary outcomes. prop_score_estimator Stack, learner class (inheriting Lrnr_base), containing set learners sl3 estimate propensity score. Defaults generalized linear model one- two- way interactions among confounders variables. prop_score_values optional character corresponding (known) propensity score values observation data. Defaults NULL. failure_hazard_estimator Stack, learner class (inheriting Lrnr_base), containing set learners sl3 estimate conditional failure hazard function. Defaults XGBoost learner confounders exposure variables covariates. used time--event outcomes. censoring_hazard_estimator Stack, learner class (inheriting Lrnr_base), containing set learners sl3 estimate conditional censoring hazard function. Defaults XGBoost learner confounders exposure variables covariates. used time--event outcomes.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/cross_fit_fold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cross-Fitting Procedure — cross_fit_fold","text":"list object containing validation dataset's uncentered efficient influence function estimates, treatment effect modification variable importance parameter estimates, average causal effect estimate, proportion observations validation data.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/fit_censoring_hazard.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional Censoring Hazard Estimator — fit_censoring_hazard","title":"Conditional Censoring Hazard Estimator — fit_censoring_hazard","text":"fit_censoring_hazard() estimates conditional censoring hazard nuisance parameter. estimator used estimation based learners argument, covariates considered specified confounders exposure arguments.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/fit_censoring_hazard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional Censoring Hazard Estimator — fit_censoring_hazard","text":"","code":"fit_censoring_hazard(   train_data,   valid_data,   learners,   confounders,   exposure,   times,   censoring )"},{"path":"https://insightsengineering.github.io/unihtee/main/reference/fit_censoring_hazard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional Censoring Hazard Estimator — fit_censoring_hazard","text":"train_data long data.table containing observed data. train_data formatted unihtee() tte_data_melt(). valid_data optional data.table representing holdout dataset observed data. used cross-fitting purposes. Defaults NULL. learners Stack, learner class (inheriting Lrnr_base), containing set learners sl3 estimate propensity score model. confounders character vector column names corresponding baseline covariates. exposure character corresponding exposure variable. times character giving name corresponding times. censoring character indicating censoring indicator.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/fit_censoring_hazard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conditional Censoring Hazard Estimator — fit_censoring_hazard","text":"named list three elements. (1) \"estimates\", expected censoring hazards observation time point valid_data, specified, train_data otherwise. (2) \"exp_estimates\", expected conditional censoring hazards observation time point valid_data, specified, train_data otherwise, observations exposed. (3) \"noexp_estimates\", expected conditional censoring hazards observation time point valid_data, specified, train_data otherwise, observations exposed.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/fit_cond_outcome.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional Outcome Estimator — fit_cond_outcome","title":"Conditional Outcome Estimator — fit_cond_outcome","text":"fit_cond_outcome() estimates conditional outcome, based exposure confounders, train_data dataset. estimator used estimation based learners argument, covariates considered specified confounders exposure arguments.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/fit_cond_outcome.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional Outcome Estimator — fit_cond_outcome","text":"","code":"fit_cond_outcome(   train_data,   valid_data,   learners,   outcome,   exposure,   confounders )"},{"path":"https://insightsengineering.github.io/unihtee/main/reference/fit_cond_outcome.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional Outcome Estimator — fit_cond_outcome","text":"train_data data.table containing observed data. train_data formatted unihtee(). valid_data optional data.table representing holdout dataset observed data. used cross-fitting purposes. Defaults NULL. learners Stack, learner class (inheriting Lrnr_base), containing set learners sl3 estimate propensity score model. outcome character corresponding outcome variable. exposure character corresponding exposure variable. confounders character vector column names corresponding baseline covariates.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/fit_cond_outcome.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conditional Outcome Estimator — fit_cond_outcome","text":"named list four elements. (1) \"estimates\", expected conditional outcome observation valid_data, specified, train_data otherwise. (2) \"fit\", trained Stack learner. (3) \"exp_estimates\", expected conditional outcome observation valid_data, specified, train_data otherwise, observations exposed. (4) \"noexp_estimates\", expected conditional outcome observation valid_data, specified, train_data otherwise, observations exposed.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/fit_failure_hazard.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional Failure Hazard Estimator — fit_failure_hazard","title":"Conditional Failure Hazard Estimator — fit_failure_hazard","text":"fit_failure_hazard() estimates conditional failure hazard nuisance parameter. estimator used estimation based learners argument, covariates considered specified confounders exposure arguments.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/fit_failure_hazard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional Failure Hazard Estimator — fit_failure_hazard","text":"","code":"fit_failure_hazard(   train_data,   valid_data,   learners,   confounders,   exposure,   times )"},{"path":"https://insightsengineering.github.io/unihtee/main/reference/fit_failure_hazard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional Failure Hazard Estimator — fit_failure_hazard","text":"train_data long data.table containing observed data. train_data formatted unihtee() tte_data_melt(). valid_data optional data.table representing holdout dataset observed data. used cross-fitting purposes. Defaults NULL. learners Stack, learner class (inheriting Lrnr_base), containing set learners sl3 estimate propensity score model. confounders character vector column names corresponding baseline covariates. exposure character corresponding exposure variable. times character giving name corresponding times.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/fit_failure_hazard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conditional Failure Hazard Estimator — fit_failure_hazard","text":"named list three elements. (1) \"estimates\", expected failure hazards observation time point valid_data, specified, train_data otherwise. (2) \"exp_estimates\", expected conditional failure hazards observation time point valid_data, specified, train_data otherwise, observations exposed. (3) \"noexp_estimates\", expected conditional failure hazards observation time point valid_data, specified, train_data otherwise, observations exposed.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/fit_prop_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Propensity Score Estimator — fit_prop_score","title":"Propensity Score Estimator — fit_prop_score","text":"fit_prop_score() estimates propensity score train_data dataset. estimator used estimation based learners argument, covariates considered specified confounders argument.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/fit_prop_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Propensity Score Estimator — fit_prop_score","text":"","code":"fit_prop_score(train_data, valid_data, learners, exposure, confounders)"},{"path":"https://insightsengineering.github.io/unihtee/main/reference/fit_prop_score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Propensity Score Estimator — fit_prop_score","text":"train_data data.table containing observed data. train_data formatted unihtee(). valid_data optional data.table representing holdout dataset observed data. used cross-fitting purposes. Defaults NULL. learners Stack, learner class (inheriting Lrnr_base), containing set learners sl3 estimate propensity score model. exposure character corresponding exposure variable. confounders character vector column names corresponding baseline covariates.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/fit_prop_score.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Propensity Score Estimator — fit_prop_score","text":"named list two elements. (1) \"estimates\", propensity score estimates observation valid_data, specified, train_data otherwise. (2) \"fit\", trained Stack learner.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/one_step_ate_estimator.html","id":null,"dir":"Reference","previous_headings":"","what":"One Step Estimator of the Average Treatment Effect — one_step_ate_estimator","title":"One Step Estimator of the Average Treatment Effect — one_step_ate_estimator","text":"one_step_ate_estimator() implements one-step estimator average treatment effect.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/one_step_ate_estimator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"One Step Estimator of the Average Treatment Effect — one_step_ate_estimator","text":"","code":"one_step_ate_estimator(   data,   confounders,   exposure,   outcome,   prop_score_fit,   prop_score_values = NULL,   cond_outcome_fit )"},{"path":"https://insightsengineering.github.io/unihtee/main/reference/one_step_ate_estimator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"One Step Estimator of the Average Treatment Effect — one_step_ate_estimator","text":"data data.table containing observed data. train_data formatted unihtee(). confounders character vector column names corresponding baseline covariates. exposure character corresponding exposure variable. outcome character corresponding outcome variable. prop_score_fit list output fit_prop_score() function. prop_score_values numeric vector corresponding (known) propensity score values observation data. cond_outcome_fit list output fit_cond_outcome() function.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/one_step_ate_estimator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"One Step Estimator of the Average Treatment Effect — one_step_ate_estimator","text":"one-step estimate average treatment effect.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/one_step_estimator.html","id":null,"dir":"Reference","previous_headings":"","what":"One Step Estimator — one_step_estimator","title":"One Step Estimator — one_step_estimator","text":"one_step_estimator() computes one-step estimates given parameter provided uncentered efficient influence functions.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/one_step_estimator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"One Step Estimator — one_step_estimator","text":"","code":"one_step_estimator(uncentered_eif_data)"},{"path":"https://insightsengineering.github.io/unihtee/main/reference/one_step_estimator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"One Step Estimator — one_step_estimator","text":"uncentered_eif_data data.table column efficient influence function potential treatment effect modifier applied dataset.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/one_step_estimator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"One Step Estimator — one_step_estimator","text":"one-row data.table containing one-step estimates potential modifier.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/one_step_estimator_ate_log_outcome.html","id":null,"dir":"Reference","previous_headings":"","what":"One-Step Estimator of the Marginal Relative Effect for Non-Time-to-Event Outcomes — one_step_estimator_ate_log_outcome","title":"One-Step Estimator of the Marginal Relative Effect for Non-Time-to-Event Outcomes — one_step_estimator_ate_log_outcome","text":"One-Step Estimator Marginal Relative Effect Non-Time--Event Outcomes","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/one_step_estimator_ate_log_outcome.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"One-Step Estimator of the Marginal Relative Effect for Non-Time-to-Event Outcomes — one_step_estimator_ate_log_outcome","text":"","code":"one_step_estimator_ate_log_outcome(   data,   confounders,   exposure,   outcome,   prop_score_fit,   prop_score_values = NULL,   cond_outcome_fit )"},{"path":"https://insightsengineering.github.io/unihtee/main/reference/one_step_estimator_ate_log_outcome.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"One-Step Estimator of the Marginal Relative Effect for Non-Time-to-Event Outcomes — one_step_estimator_ate_log_outcome","text":"data data.table containing observed data. train_data formatted unihtee(). confounders character vector column names corresponding baseline covariates. exposure character corresponding exposure variable. outcome character corresponding outcome variable. prop_score_fit list output fit_prop_score() function. prop_score_values numeric vector corresponding (known) propensity score values observation data. cond_outcome_fit list output fit_cond_outcome() function.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/one_step_estimator_ate_log_outcome.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"One-Step Estimator of the Marginal Relative Effect for Non-Time-to-Event Outcomes — one_step_estimator_ate_log_outcome","text":"one-step estimate.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/one_step_estimator_rmst_log_outcome.html","id":null,"dir":"Reference","previous_headings":"","what":"One-Step Estimator of the Marginal Relative Effect for Time-to-Event Outcomes — one_step_estimator_rmst_log_outcome","title":"One-Step Estimator of the Marginal Relative Effect for Time-to-Event Outcomes — one_step_estimator_rmst_log_outcome","text":"One-Step Estimator Marginal Relative Effect Time--Event Outcomes","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/one_step_estimator_rmst_log_outcome.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"One-Step Estimator of the Marginal Relative Effect for Time-to-Event Outcomes — one_step_estimator_rmst_log_outcome","text":"","code":"one_step_estimator_rmst_log_outcome(   data,   exposure,   outcome,   prop_score_fit,   prop_score_values,   failure_hazard_fit,   censoring_hazard_fit )"},{"path":"https://insightsengineering.github.io/unihtee/main/reference/one_step_estimator_rmst_log_outcome.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"One-Step Estimator of the Marginal Relative Effect for Time-to-Event Outcomes — one_step_estimator_rmst_log_outcome","text":"data data.table containing observed data. train_data formatted unihtee(). exposure character corresponding exposure variable. outcome character corresponding outcome variable. prop_score_fit list output fit_prop_score() function. prop_score_values numeric vector corresponding (known) propensity score values observation data. failure_hazard_fit list output fit_cond_outcome() function.' censoring_hazard_fit list output fit_censoring_hazard() function.'","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/one_step_estimator_rmst_log_outcome.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"One-Step Estimator of the Marginal Relative Effect for Time-to-Event Outcomes — one_step_estimator_rmst_log_outcome","text":"one-step estimate.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/one_step_rmst_diff_estimator.html","id":null,"dir":"Reference","previous_headings":"","what":"One-Step Estimator of Difference of RMST — one_step_rmst_diff_estimator","title":"One-Step Estimator of Difference of RMST — one_step_rmst_diff_estimator","text":"One-Step Estimator Difference RMST","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/one_step_rmst_diff_estimator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"One-Step Estimator of Difference of RMST — one_step_rmst_diff_estimator","text":"","code":"one_step_rmst_diff_estimator(   data,   exposure,   outcome,   prop_score_fit,   prop_score_values,   failure_hazard_fit,   censoring_hazard_fit )"},{"path":"https://insightsengineering.github.io/unihtee/main/reference/one_step_rmst_diff_estimator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"One-Step Estimator of Difference of RMST — one_step_rmst_diff_estimator","text":"data data.table containing observed data. train_data formatted unihtee(). exposure character corresponding exposure variable. outcome character corresponding outcome variable. prop_score_fit list output fit_prop_score() function. prop_score_values numeric vector corresponding (known) propensity score values observation data. failure_hazard_fit list output fit_cond_outcome() function.' censoring_hazard_fit list output fit_censoring_hazard() function.'","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/one_step_rmst_diff_estimator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"One-Step Estimator of Difference of RMST — one_step_rmst_diff_estimator","text":"numeric one-step estimate.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/plot.unihtee.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a unihtee Object — plot.unihtee","title":"Plot a unihtee Object — plot.unihtee","text":"plot.unihtee() produces plot depicting estimated simple linear regression line specified modifier parameter estimated unihtee().","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/plot.unihtee.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a unihtee Object — plot.unihtee","text":"","code":"# S3 method for class 'unihtee' plot(x, y, ..., modifier_name, print_interpretation = TRUE)"},{"path":"https://insightsengineering.github.io/unihtee/main/reference/plot.unihtee.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a unihtee Object — plot.unihtee","text":"x unihtee class object output unihtee(). y Ignored. ... Ignored. modifier_name character specifying treatment effect modifier variable importance parameter estimate plot. print_interpretation flag indicating whether print interpretation TEM-VIP inference plot. Defaults TRUE.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/plot.unihtee.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a unihtee Object — plot.unihtee","text":"ggplot2 object.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/plugin_estimator.html","id":null,"dir":"Reference","previous_headings":"","what":"Plug-In Estimator — plugin_estimator","title":"Plug-In Estimator — plugin_estimator","text":"plugin_estimator() estimates treatment effect modifier variable importance parameters using plug-estimation strategy.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/plugin_estimator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plug-In Estimator — plugin_estimator","text":"","code":"plugin_estimator(   data,   outcome,   modifiers,   effect,   cond_outcome_fit,   failure_hazard_fit )"},{"path":"https://insightsengineering.github.io/unihtee/main/reference/plugin_estimator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plug-In Estimator — plugin_estimator","text":"data data.table containing observed data. train_data formatted unihtee(). outcome character corresponding outcome variable. modifiers character vector columns names corresponding suspected effect modifiers. vector must subset confounders. effect character indicating type treatment effect modifier variable importance parameter. Currently supports \"absolute\" \"relative\". cond_outcome_fit list output fit_cond_outcome() function. failure_hazard_fit list output fit_cond_outcome() function.'","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/plugin_estimator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plug-In Estimator — plugin_estimator","text":"vector containing plug-estimates potential modifier.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/print.unihtee.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a unihtee Object — print.unihtee","title":"Print a unihtee Object — print.unihtee","text":"Print unihtee Object","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/print.unihtee.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a unihtee Object — print.unihtee","text":"","code":"# S3 method for class 'unihtee' print(x, ...)"},{"path":"https://insightsengineering.github.io/unihtee/main/reference/print.unihtee.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a unihtee Object — print.unihtee","text":"x unihtee object output unihtee() ... Ignored.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/test_hypotheses.html","id":null,"dir":"Reference","previous_headings":"","what":"Test Hypotheses — test_hypotheses","title":"Test Hypotheses — test_hypotheses","text":"test_hypotheses() convenience function testing null hypotheses.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/test_hypotheses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Hypotheses — test_hypotheses","text":"","code":"test_hypotheses(n_obs, estimates, var_estimates, rescale_factor)"},{"path":"https://insightsengineering.github.io/unihtee/main/reference/test_hypotheses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test Hypotheses — test_hypotheses","text":"n_obs numeric representing number observations dataset. estimates one-row data.table estimates potential treatment effect modifier. var_estimates one-row data.table estimator variances potential treatment effect modifier. rescale_factor numeric factor re-scale estimates efficient influence functions. Used outcome variable continuous bounded 0 1.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/test_hypotheses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test Hypotheses — test_hypotheses","text":"data.table containing hypothesis testing results.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/tml_ate_estimator.html","id":null,"dir":"Reference","previous_headings":"","what":"Targeted Maximum Likelihood Estimator of the Average Treatment Effect — tml_ate_estimator","title":"Targeted Maximum Likelihood Estimator of the Average Treatment Effect — tml_ate_estimator","text":"tml_ate_estimator() implements targeted maximum likelihood estimator average treatment effect.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/tml_ate_estimator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Targeted Maximum Likelihood Estimator of the Average Treatment Effect — tml_ate_estimator","text":"","code":"tml_ate_estimator(   data,   confounders,   exposure,   outcome,   prop_score_fit,   prop_score_values = NULL,   cond_outcome_fit )"},{"path":"https://insightsengineering.github.io/unihtee/main/reference/tml_ate_estimator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Targeted Maximum Likelihood Estimator of the Average Treatment Effect — tml_ate_estimator","text":"data data.table containing observed data. train_data formatted unihtee(). confounders character vector column names corresponding baseline covariates. exposure character corresponding exposure variable. outcome character corresponding outcome variable. prop_score_fit list output fit_prop_score() function. prop_score_values numeric vector corresponding (known) propensity score values observation data. cond_outcome_fit list output fit_cond_outcome() function.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/tml_ate_estimator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Targeted Maximum Likelihood Estimator of the Average Treatment Effect — tml_ate_estimator","text":"targeted maximum likelihood estimate average treatment effect.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/tml_estimator.html","id":null,"dir":"Reference","previous_headings":"","what":"Targeted Maximum Likelihood Estimator — tml_estimator","title":"Targeted Maximum Likelihood Estimator — tml_estimator","text":"tml_estimator() computes targeted maximum likelihood estimates given parameter.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/tml_estimator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Targeted Maximum Likelihood Estimator — tml_estimator","text":"","code":"tml_estimator(   data,   confounders,   modifiers,   exposure,   outcome,   effect,   prop_score_fit,   prop_score_values = NULL,   cond_outcome_fit,   failure_hazard_fit,   censoring_hazard_fit )"},{"path":"https://insightsengineering.github.io/unihtee/main/reference/tml_estimator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Targeted Maximum Likelihood Estimator — tml_estimator","text":"data data.table containing observed data. train_data formatted unihtee(). confounders character vector column names corresponding baseline covariates. modifiers character vector columns names corresponding suspected effect modifiers. vector must subset confounders. exposure character corresponding exposure variable. outcome character corresponding outcome variable. effect character indicating type treatment effect modifier variable importance parameter. Currently supports \"absolute\" \"relative\". prop_score_fit list output fit_prop_score() function. prop_score_values numeric vector corresponding (known) propensity score values observation data. cond_outcome_fit list output fit_cond_outcome() function. failure_hazard_fit list output fit_cond_outcome() function.' censoring_hazard_fit list output fit_censoring_hazard() function.'","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/tml_estimator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Targeted Maximum Likelihood Estimator — tml_estimator","text":"one-row data.table containing targeted maximum likelihood estimates potential modifier.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/tml_estimator_ate_log_outcome.html","id":null,"dir":"Reference","previous_headings":"","what":"TMLE of the Marginal Relative Effect for Non-Time-to-Event Outcomes — tml_estimator_ate_log_outcome","title":"TMLE of the Marginal Relative Effect for Non-Time-to-Event Outcomes — tml_estimator_ate_log_outcome","text":"TMLE Marginal Relative Effect Non-Time--Event Outcomes","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/tml_estimator_ate_log_outcome.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TMLE of the Marginal Relative Effect for Non-Time-to-Event Outcomes — tml_estimator_ate_log_outcome","text":"","code":"tml_estimator_ate_log_outcome(   data,   confounders,   exposure,   outcome,   prop_score_fit,   prop_score_values = NULL,   cond_outcome_fit )"},{"path":"https://insightsengineering.github.io/unihtee/main/reference/tml_estimator_ate_log_outcome.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"TMLE of the Marginal Relative Effect for Non-Time-to-Event Outcomes — tml_estimator_ate_log_outcome","text":"data data.table containing observed data. train_data formatted unihtee(). confounders character vector column names corresponding baseline covariates. exposure character corresponding exposure variable. outcome character corresponding outcome variable. prop_score_fit list output fit_prop_score() function. prop_score_values numeric vector corresponding (known) propensity score values observation data. cond_outcome_fit list output fit_cond_outcome() function.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/tml_estimator_ate_log_outcome.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"TMLE of the Marginal Relative Effect for Non-Time-to-Event Outcomes — tml_estimator_ate_log_outcome","text":"TML estimate.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/tml_estimator_rmst_log_outcome.html","id":null,"dir":"Reference","previous_headings":"","what":"TMLE of the Marginal Relative Effect for Time-to-Event Outcomes — tml_estimator_rmst_log_outcome","title":"TMLE of the Marginal Relative Effect for Time-to-Event Outcomes — tml_estimator_rmst_log_outcome","text":"TMLE Marginal Relative Effect Time--Event Outcomes","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/tml_estimator_rmst_log_outcome.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TMLE of the Marginal Relative Effect for Time-to-Event Outcomes — tml_estimator_rmst_log_outcome","text":"","code":"tml_estimator_rmst_log_outcome(   data,   exposure,   outcome,   prop_score_fit,   prop_score_values,   failure_hazard_fit,   censoring_hazard_fit )"},{"path":"https://insightsengineering.github.io/unihtee/main/reference/tml_estimator_rmst_log_outcome.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"TMLE of the Marginal Relative Effect for Time-to-Event Outcomes — tml_estimator_rmst_log_outcome","text":"data data.table containing observed data. train_data formatted unihtee(). exposure character corresponding exposure variable. outcome character corresponding outcome variable. prop_score_fit list output fit_prop_score() function. prop_score_values numeric vector corresponding (known) propensity score values observation data. failure_hazard_fit list output fit_cond_outcome() function.' censoring_hazard_fit list output fit_censoring_hazard() function.'","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/tml_estimator_rmst_log_outcome.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"TMLE of the Marginal Relative Effect for Time-to-Event Outcomes — tml_estimator_rmst_log_outcome","text":"TML estimate.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/tml_rmst_diff_estimator.html","id":null,"dir":"Reference","previous_headings":"","what":"Targeted Maximum Likelihood Estimator of Difference of RMST — tml_rmst_diff_estimator","title":"Targeted Maximum Likelihood Estimator of Difference of RMST — tml_rmst_diff_estimator","text":"Targeted Maximum Likelihood Estimator Difference RMST","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/tml_rmst_diff_estimator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Targeted Maximum Likelihood Estimator of Difference of RMST — tml_rmst_diff_estimator","text":"","code":"tml_rmst_diff_estimator(   data,   exposure,   outcome,   prop_score_fit,   prop_score_values,   failure_hazard_fit,   censoring_hazard_fit )"},{"path":"https://insightsengineering.github.io/unihtee/main/reference/tml_rmst_diff_estimator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Targeted Maximum Likelihood Estimator of Difference of RMST — tml_rmst_diff_estimator","text":"data data.table containing observed data. train_data formatted unihtee(). exposure character corresponding exposure variable. outcome character corresponding outcome variable. prop_score_fit list output fit_prop_score() function. prop_score_values numeric vector corresponding (known) propensity score values observation data. failure_hazard_fit list output fit_cond_outcome() function.' censoring_hazard_fit list output fit_censoring_hazard() function.'","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/tml_rmst_diff_estimator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Targeted Maximum Likelihood Estimator of Difference of RMST — tml_rmst_diff_estimator","text":"numeric one-step estimate.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/tte_data_melt.html","id":null,"dir":"Reference","previous_headings":"","what":"Time-to-Event Data Melt — tte_data_melt","title":"Time-to-Event Data Melt — tte_data_melt","text":"tte_data_melt() turns wide-format data.table objects long-format data.table objects.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/tte_data_melt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time-to-Event Data Melt — tte_data_melt","text":"","code":"tte_data_melt(   data,   confounders,   exposure,   outcome,   censoring,   time_cutoff,   prop_score_values )"},{"path":"https://insightsengineering.github.io/unihtee/main/reference/tte_data_melt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time-to-Event Data Melt — tte_data_melt","text":"data data.table containing observed data. confounders character vector column names corresponding baseline covariates. exposure character corresponding exposure variable. outcome character corresponding outcome variable. censoring character indicating right censoring indicator variable. time_cutoff numeric representing time point evaluate time--event parameter. prop_score_values character corresponding (known) propensity score values observation data.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/tte_data_melt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time-to-Event Data Melt — tte_data_melt","text":"long, time--event version original data.table object. , observations repeated time points earliest time data time_cutoff argument.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/unihtee.html","id":null,"dir":"Reference","previous_headings":"","what":"Univariate Heterogeneous Treatment Effect Modifier Estimator — unihtee","title":"Univariate Heterogeneous Treatment Effect Modifier Estimator — unihtee","text":"unihtee() estimates treatment effect modifier variable importance parameters (TEM-VIPs). absolute relative TEM-VIPs can estimated using one-step targeted maximum likelihood estimators.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/unihtee.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Univariate Heterogeneous Treatment Effect Modifier Estimator — unihtee","text":"","code":"unihtee(   data,   confounders,   modifiers,   exposure,   outcome,   censoring = NULL,   time_cutoff = NULL,   outcome_type = c(\"continuous\", \"binary\", \"time-to-event\"),   effect = c(\"absolute\", \"relative\"),   estimator = c(\"tmle\", \"onestep\"),   cross_fit = FALSE,   cross_fit_folds = 5,   cond_outcome_estimator = sl3::Lrnr_glm_fast$new(),   prop_score_estimator = sl3::Lrnr_glm_fast$new(),   prop_score_values = NULL,   failure_hazard_estimator = sl3::Lrnr_xgboost$new(),   censoring_hazard_estimator = sl3::Lrnr_xgboost$new(),   parallel = FALSE )"},{"path":"https://insightsengineering.github.io/unihtee/main/reference/unihtee.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Univariate Heterogeneous Treatment Effect Modifier Estimator — unihtee","text":"data data.table containing observed data. confounders character vector column names corresponding baseline covariates. modifiers character vector columns names corresponding suspected effect modifiers. vector must subset confounders. exposure character corresponding exposure variable. outcome character corresponding outcome variable. censoring character indicating right censoring indicator variable. used time--event outcomes. Defaults NULL. time_cutoff numeric representing time point evaluate time--event parameter. used time--event outcomes. Defaults NULL. outcome_type character indicating outcome type. \"continuous\", \"binary\" \"time--event\" currently supported. effect character indicating type treatment effect modifier variable importance parameter. Currently supports \"absolute\" \"relative\". estimator character set either \"tmle\" \"onestep\". former results unihtee() use targeted maximum likelihood estimators estimate desired TEM-VIP, latter uses one step estimator. cross_fit logical determining whether cross-fitting used. Defaults FALSE. cross_fit_folds numeric stating number folds use cross-fitting procedure. Defaults 5. cond_outcome_estimator Stack, learner class (inheriting Lrnr_base), containing set learners sl3 estimate conditional outcome. Defaults generalized linear model one- two- way interactions among confounders exposure variables. used continuous binary outcomes. prop_score_estimator Stack, learner class (inheriting Lrnr_base), containing set learners sl3 estimate propensity score. Defaults generalized linear model one- two- way interactions among confounders variables. prop_score_values optional character corresponding (known) propensity score values observation data. Defaults NULL. failure_hazard_estimator Stack, learner class (inheriting Lrnr_base), containing set learners sl3 estimate conditional failure hazard function. Defaults XGBoost learner confounders exposure variables covariates. used time--event outcomes. censoring_hazard_estimator Stack, learner class (inheriting Lrnr_base), containing set learners sl3 estimate conditional censoring hazard function. Defaults XGBoost learner confounders exposure variables covariates. used time--event outcomes. parallel logical stating origami's built-parallelized cross-validation routines used cross_fit = TRUE. future suite used. Defaults FALSE.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/reference/unihtee.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Univariate Heterogeneous Treatment Effect Modifier Estimator — unihtee","text":"list containing: temvip_inference_tbl: data.table containing effect estimates (adjusted) p-values modifiers. suspected treatment effect modifiers ordered according ascending p-values. ace_estimate: numeric providing estimate average causal effect associated specified effect outcome types. data: data.table containing observed data used estimate TEM-VIPs, containing confounders, modifiers, exposure, outcome, censoring (provided), propensity score (provided) variables.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/news/index.html","id":"unihtee-003","dir":"Changelog","previous_headings":"","what":"unihtee 0.0.3","title":"unihtee 0.0.3","text":"Adding plotting functionality unihtee() now outputs unihtee class object associated plotting printing methods README vignette tidied","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/news/index.html","id":"unihtee-002","dir":"Changelog","previous_headings":"","what":"unihtee 0.0.2","title":"unihtee 0.0.2","text":"Minor change standard error calculation. change impact asymptotically, might slightly improve finite sample performance.","code":""},{"path":"https://insightsengineering.github.io/unihtee/main/news/index.html","id":"unihtee-001","dir":"Changelog","previous_headings":"","what":"unihtee 0.0.1","title":"unihtee 0.0.1","text":"Public release unihtee.","code":""}]
